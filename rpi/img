#!/usr/bin/python3
"""Kibar imager. Helper utils to download, format, install and manage raspbery
pi images for the kibar project.

Usage:
  img format <device>
  img chroot <device>
  img install <device>
  img (-h | --help)
  img --version

Options:
  -h --help     Show this screen.
  --version     Show version.

"""
from docopt import docopt
import requests
import os
import hashlib

image_url = "http://archlinuxarm.org/os/ArchLinuxARM-rpi-latest.tar.gz"

def md5_check_file(md5sum, fname):
    """Checks a file matches the given md5sum"""
    hash = hashlib.md5()
    with open(fname, "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hash.update(chunk)
    return md5sum == hash.hexdigest()

def getImage(url, dest):
    """Downloads a file from url and stores it in dest if the md5sum of the
    local and remote match"""
    local_filename = url.split('/')[-1]
    return local_filename # Disabled for now, assuming cached

    if os.path.isfile(local_filename):
        print("checking cache")
        r = requests.get(url + ".md5")
        r.raise_for_status()
        if md5_check_file(r.text.split(" ")[0], dest):
            print("matched, using cache")
            return local_filename

    print("download file")
    r = requests.get(url, stream=True)
    with open(local_filename, 'wb') as f:
        for chunk in r.iter_content(chunk_size=1024):
            if chunk: # filter out keep-alive new chunks
                f.write(chunk)
    return local_filename


if __name__ == '__main__':
    arguments = docopt(__doc__, version='kibar imager 0.1')
    print(arguments)

    getImage(image_url, "ArchLinuxARM-rpi-latest.tar.gz")
